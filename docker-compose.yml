version: "3.8"

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./User-Service/Dockerfile
    restart: on-failure
    environment:
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network
  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    build:
      context: .
      dockerfile: ./Accomodation-Service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_DB_HOST: ${ACCOMMODATION_DB_HOST}
      ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      ACCOMMODATION_DB_NAME: ${ACCOMMODATION_DB_NAME}
      ACCOMMODATION_DB_USER: ${ACCOMMODATION_DB_USER}
      ACCOMMODATION_DB_PASS: ${ACCOMMODATION_DB_PASS}
      ACCOMMODATION_RESERVATION_SERVICE_HOST: ${ACCOMMODATION_RESERVATION_SERVICE_HOST}
      ACCOMMODATION_RESERVATION_SERVICE_PORT: ${ACCOMMODATION_RESERVATION_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network

  reservation_service:
    image: reservation_service
    container_name: reservation_service
    build:
      context: .
      dockerfile: ./Accomodation-reservation-Service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_RESERVATION_SERVICE_PORT: ${ACCOMMODATION_RESERVATION_SERVICE_PORT}
      ACCOMMODATION_RESERVATION_DB_HOST: ${ACCOMMODATION_RESERVATION_DB_HOST}
      ACCOMMODATION_RESERVATION_DB_PORT: ${ACCOMMODATION_RESERVATION_DB_PORT}
      ACCOMMODATION_RESERVATION_DB_NAME: ${ACCOMMODATION_RESERVATION_DB_NAME}
      ACCOMMODATION_RESERVATION_DB_USER: ${ACCOMMODATION_RESERVATION_DB_USER}
      ACCOMMODATION_RESERVATION_DB_PASS: ${ACCOMMODATION_RESERVATION_DB_PASS}
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    depends_on:
      - reservation_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_RESERVATION_SERVICE_HOST: ${ACCOMMODATION_RESERVATION_SERVICE_HOST}
      ACCOMMODATION_RESERVATION_SERVICE_PORT: ${ACCOMMODATION_RESERVATION_SERVICE_PORT}
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  accommodation_db:
    image: postgres
    container_name: accommodation_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${ACCOMMODATION_DB_USER}
      POSTGRES_PASSWORD: ${ACCOMMODATION_DB_PASS}
      POSTGRES_DB: ${ACCOMMODATION_DB_NAME}
    networks:
      - network
      
  reservation_db:
    image: postgres
    container_name: reservation_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${ACCOMMODATION_RESERVATION_DB_USER}
      POSTGRES_PASSWORD: ${ACCOMMODATION_RESERVATION_DB_PASS}
      POSTGRES_DB: ${ACCOMMODATION_RESERVATION_DB_NAME}
    networks:
      - network

  

networks:
  network:
    driver: bridge